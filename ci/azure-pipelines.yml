# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  targetFramework: 'net6.0-windows'
  GitVersion.SemVer: ''

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.x'
    updateAssemblyInfo: true

- task: PowerShell@2
  displayName: Patch BuildDateAttribute
  inputs:
    targetType: 'inline'
    script: |
      Write-Output "==============================================================================================================================================="
      Write-Output "Pre build. Patching BuildDate Attribute..."
      Write-Output "==============================================================================================================================================="
      $buildDateAttribute = [DateTime]::UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
      Write-Output "Using: '$buildDateAttribute'"
      $dir = "$(Build.SourcesDirectory)\src\EM.HostsManager.App"
      Write-Output "Currently in: '$dir'"
      $fileLocation = Join-Path $dir -ChildPath "Program.BuildDate.cs" 
      $placeHolder = "BUILD-DATE-ATTRIBUTE"
      (get-content $fileLocation) | foreach-object {$_ -replace $placeHolder, $buildDateAttribute} | set-content $fileLocation
      Write-Output "BuildDateAttribute written..."
      Write-Output "==============================================================================================================================================="

- task: PowerShell@2
  displayName: Patch CommitIdAttribute
  inputs:
    targetType: 'inline'
    script: |
      Write-Output "==============================================================================================================================================="
      Write-Output "Pre build. Patching CommitId Attribute..."
      Write-Output "==============================================================================================================================================="
      $commitIdAttribute = git log --format="%H" -n 1
      Write-Output "Using: '$commitIdAttribute'"
      $dir = "$(Build.SourcesDirectory)\src\EM.HostsManager.App"
      Write-Output "Currently in: '$dir'"
      $fileLocation = Join-Path $dir -ChildPath "Program.CommitId.cs" 
      $placeHolder = "COMMIT-ID-ATTRIBUTE"
      (get-content $fileLocation) | foreach-object {$_ -replace $placeHolder, $commitIdAttribute} | set-content $fileLocation
      Write-Output "CommitIdAttribute written..."
      Write-Output "==============================================================================================================================================="

- task: VSBuild@1
  displayName: Build
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=false /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\App.zip"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.SemVer'

- task: PowerShell@2
  displayName: Display Version
  inputs:
    targetType: 'inline'
    script: |
      Write-Output "==============================================================================================================================================="
      Write-Output "Version : $(GitVersion.SemVer)"
      Write-Output "==============================================================================================================================================="

# Install Inno Setup with chocolatey
- task: PowerShell@2
  displayName: 'Install Inno Setup'
  inputs:
    targetType: 'inline'
    script: 'choco install innosetup'

# Install Inno Setup (idp plugin) with chocolatey
- task: PowerShell@2
  displayName: 'Install Inno Download Plugin (idp)'
  inputs:
    targetType: 'inline'
    script: 'choco install inno-download-plugin'

# Execute Inno Setup Install script
- task: PowerShell@2
  displayName: 'Build Installer (Inno Setup)'
  inputs:
    targetType: 'inline'
    script: 'iscc.exe $(Build.SourcesDirectory)\src\EM.HostsManager.Installer\EM.Hosts-Manager.Installer.iss /DInstallerVersion=$(GitVersion.SemVer)'

- task: CopyFiles@2
  displayName: Copy Build Files (1 of 3)
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\src\EM.HostsManager.App\bin\$(BuildConfiguration)\$(targetFramework)'
    Contents: '**'
    TargetFolder: '$(Build.BinariesDirectory)'
    CleanTargetFolder: true
    OverWrite: true

- task: CopyFiles@2
  displayName: Copy Build Files (2 of 3)
  inputs:
    Contents: |
      $(Build.SourcesDirectory)\src\EM.HostsManager.App\bin\$(BuildConfiguration)\$(targetFramework)\EM.HostsManager.App.exe
      $(Build.SourcesDirectory)\src\EM.HostsManager.App\bin\$(BuildConfiguration)\$(targetFramework)\EM.HostsManager.App.dll
      $(Build.SourcesDirectory)\src\EM.HostsManager.App\bin\$(BuildConfiguration)\$(targetFramework)\EM.HostsManager.App.runtimeconfig.json
    TargetFolder: '$(Build.BinariesDirectory)\Deploy'
    CleanTargetFolder: true
    OverWrite: true
    flattenFolders: true

- task: CopyFiles@2
  displayName: Copy build files (3 of 3)
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\src\EM.HostsManager.Installer\Output'
    Contents: |
      *
    TargetFolder: '$(Build.BinariesDirectory)\Installer'
    CleanTargetFolder: false
    OverWrite: true

- task: ArchiveFiles@2
  displayName: Build Artifact (Zip)
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/EM.HostsManager-$(GitVersion.SemVer)-$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'EM.HostsManager-$(GitVersion.SemVer)-$(Build.BuildId).zip'
    publishLocation: 'Container'
